<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
	<meta name="apple-mobile-web-app-capable" content="yes" />
	<title>Cartagen: NEWSFLOW</title>
	<link rel="stylesheet" href="style.css" type="text/css" media="screen" title="no title" charset="utf-8">
	<!--[if IE]><script type="text/javascript" src="cartagen/excanvas.js"></script><![endif]-->
	<script src="cartagen/cartagen.js" type="text/javascript" charset="utf-8"></script>
	<meta name="viewport" content="width=320; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;"/>
	<script type="text/javascript" charset="utf-8">
		Cartagen.setup({
			stylesheet: "style.gss",
			static_map: true,
			static_map_layers: [
				// "samples/rome/waterway.js",
			],
			powersave: false,
			lat: 40,
			lng: 0,
			zoom: 0.000101,
			// zoom_out_limit: 0.00011
			zoom_out_limit: 0.000101
		})
		Planet = {
			paused: false,
			countries: new Hash,
			stories: new Hash,
			destinations: new Hash,
			sources: new Hash,
			tour_mode: false,
			init: function() {
				new Ajax.Request('/data/sources/50',{
					method: 'get',
					onComplete: function(response) {
						Planet.parse_sources(response.responseText.evalJSON())
						Planet.outlines()
						
						// switch back and forth from live mode to 'tour' mode:
						if (Config.display) {
							console.log('Boot up tour mode')
							// get a source_id list:
							new Ajax.Request('/data/source_list',{
								method: 'get',
								onComplete: function(response) {
									Planet.source_ids = response.responseText.evalJSON()
									// every 5 minutes:
									new PeriodicalExecuter(function(){console.log('TOUR MODE '+Planet.tour_mode);Planet.tour_mode = !Planet.tour_mode},25)
									// cycle sources
									new PeriodicalExecuter(function(){
										if (Planet.tour_mode) {
											Planet.source_ids.unshift(Planet.source_ids.pop())
											Planet.get_source(Planet.source_ids[0][0],Planet.source_ids[0][1],Planet.source_ids[0][2])
										} else {
											if (Planet.paused) {
												Planet.stories = new Hash
												Planet.sources = new Hash
												Planet.destinations = new Hash
												NewsflowLabel.matrix = new Hash
											}
											Planet.paused = false
											Planet.get_sources()
										}
									},120)
								}
							})
						}
						
					}
				})
				
				Map.rotate = 0.2
				
				if (!Config.display) new PeriodicalExecuter(Planet.get_sources,20)
				
				$('canvas').observe('cartagen:postdraw', Planet.draw.bindAsEventListener(this))
				//Disable normal OSM data/feature loading:
				$('canvas').observe('cartagen:predraw', function() {Data.current_keys = new Hash})
				Geohash.fill_bbox = function() {}
			},
			draw: function() {
				if (Config.display) Planet.walk()
				if ((Glop.frame % 30) == 0 && Planet.stories.size()>0) {
					var story = Planet.stories.values()[parseInt(Math.random(new Date)*Planet.stories.size())]
					// console.log(story['description'].replace(/(<([^>]+)>)/ig," "))
					$('title').innerHTML = "<b>"+(story.source)+":</b> "+(story['description'].replace(/(<([^>]+)>)/ig," ")).truncate(140)
				}
				for (var i = 0;i < Planet.countries.size();i++) {						
					var country = Planet.countries.values()[i]
					// override hover-in:
					country.birthdate = 4000
					country.draw()
				}
				Planet.stories.values().each(function(source) {
					$C.save()
					$C.begin_path()
					var radius = source.age*source.age*10000
					var source_x = Projection.lon_to_x(source.lon), source_y = Projection.lat_to_y(source.lat)
					if (source.age < 100) source.age += 1
						// $C.line_width(0.00001)
						// $C.opacity(0)
						// $C.stroke_style('#333')
					$C.arc(source_x,source_y,radius,0,Math.PI*2,true)
					$C.canvas.clip()
					$C.save()
						$C.begin_path()
						// $C.line_width(60000)
						// $C.stroke_style('red')
						// $C.arc(source_x,source_y,radius,0,Math.PI*2,true)
						$C.line_width((20/Map.zoom)*(10/source.age))
						$C.opacity(0.6)
						// $C.stroke_style('#26407F')
						$C.stroke_style("#"+(parseInt((source.source),36).toString(16)+"000000").truncate(6,""))
						$C.move_to(source_x,source_y)
							// $C.save()
							// $C.translate(source_x,source_y)
							// Planet.label(source.source,'#111')
							// $C.restore()
						if (source.places) {
							if (!(source.places instanceof Array)) source.places = [source.places]
							source.places.each(function(dest) {
								var dest_x = Projection.lon_to_x(dest.place.lon), dest_y = Projection.lat_to_y(dest.place.lat)
								var dx      = source_x - dest_x
								var dy      = source_y - dest_y
								var d       = Math.sqrt(dx*dx + dy*dy)
								var cp1x =  source_x + 1/4*(dest_x - source_x)
								var cp2x =  source_x + 3/4*(dest_x - source_x)
							
								var cp1y =  source_y + 1/4*(dest_y - source_y)- d*0.3
								var cp2y =  source_y + 3/4*(dest_y - source_y)- d*0.3
							
								$C.quadratic_curve_to(cp1x, cp1y, dest_x,dest_y)
								$C.move_to(source_x,source_y)
							})
							$C.stroke()
						$C.restore()
					}
					$C.restore()
				})
				// Planet.destinations.values().each(function(destination) {
				// 	$C.save()
				// 	$C.translate(destination.x,destination.y)
				// 	// console.log(destination.name)
				// 	Planet.label(destination.name,'white')
				// 	$C.restore()
				// })
				NewsflowLabel.draw()
			},
			label: function(text,color) {
				$C.save()
				$C.scale(1/Map.zoom,1/Map.zoom)
				var height = 16, padding = 3
				var width = $C.measure_text('Georgia',height,text)
				// $C.fill_style('white')
				// $C.opacity(0.2)
				// $C.rect(-((width + padding)/2),
				// 			-(height/2 + padding/2),
				// 			width + padding,
				// 	        height + padding)
				$C.opacity(0.8)
				$C.draw_text('Georgia',
				             height,
							 color,
				             0,
							 0,
							 text)
				$C.restore()
			},
			outlines: function() {
				new Ajax.Request('/planet.json',{
					method: 'get',
					onComplete: function(response) {
						var countries = response.responseText.evalJSON().features
						$l('receiving planet: '+countries.length)
						for (var i=0;i<countries.length;i++) {
							var country = countries[i]
							var data = {
								id: country.id,
								nodes: [],
								color: country['properties']['colour'],
								tags: new Hash(),
								closed_poly:true
							}
							if (country['properties']['name']) data.name = country['properties']['name']
							var multipoly = []
							country['geometry']['coordinates'].each(function(poly) {
								multipoly = multipoly.concat(poly[0])
								multipoly.push(multipoly[0])
							})
							multipoly.each(function(nd, index) {
								var n = new Node
								n.lat = nd[1]
								n.lon = nd[0]
								n.x = Projection.lon_to_x(n.lon)
								n.y = Projection.lat_to_y(n.lat)
								var node_id = country.id*index
								Feature.nodes.set(node_id,n)
								data.nodes.push(n)
							})
							data.tags.set('country',name)
							var way = new Way(data)
							Planet.countries.set(data.name,way)
							Style.parse_styles(way,Style.styles.way)
						}
						Glop.trigger_draw()
					}
				})
			},
			get_sources: function() {
				if (!Planet.paused) {
					new Ajax.Request('/data/sources/50',{
						method: 'get',
						onComplete: function(response) {
							Planet.parse_sources(response.responseText.evalJSON())
							Glop.trigger_draw()
						}
					})
				}
			},
			parse_sources: function(sources) {
				$l('receiving planet: '+sources.length)
				for (var i=0;i<sources.length;i++) {
					var story = sources[i]['story']
					story.lat = story['source']['source']['lat']
					story.lon = story['source']['source']['lon']
					story.source = story['source']['source']['name']
					if (!Planet.sources.get(story.source)) {
						Planet.sources.set(story.source,true)
						NewsflowLabel.add_label(story.source,story.lat,story.lon,'#111')
					}
					story.age = 0
					if (!Planet.stories.get(story['title'])) Planet.stories.set(story['title'],story)
					story.places.each(function(place) {
						if (!Planet.destinations.get(place.place.name)) {
							Planet.destinations.set(place.place.name,true)
							NewsflowLabel.add_label(place.place.name,place.place.lat,place.place.lon,'white')
						}
						// place.place.x = Projection.lon_to_x(place.place.lon)
						// place.place.y = Projection.lat_to_y(place.place.lat)
					})
				}
				$l('Fetched '+sources.length+' new sources, with '+Planet.stories.size()+' imported.')
			},
			get_source: function(source_id,lat,lon) {				
				Planet.paused = true
				Planet.source_lat = lat
				Planet.source_lon = lon
				new Ajax.Request('/data/source/'+source_id,{
					method: 'get',
					onComplete: function(response) {
						if (response.responseText != '[]') {
							Planet.stories = new Hash
							Planet.sources = new Hash
							Planet.destinations = new Hash
							NewsflowLabel.matrix = new Hash
							Planet.parse_sources(response.responseText.evalJSON())
							Cartagen.go_to(Planet.source_lat,Planet.source_lon,Map.zoom)
						} else {
						}
					}
				})
			},
			westward: true,
			walk: function() {
				if (Planet.westward) {
					// walk west
					if (Map.lon < 100) {
						Map.x = Projection.lon_to_x(Map.lon + 0.1)
					} else {
						Planet.westward = false
					}
				} else {
					// walk east
					if (Map.lon > -100) {
						Map.x = Projection.lon_to_x(Map.lon - 0.1)
					} else {
						Planet.westward = true
					}
				}
			},
		}

		// the problem with this scheme is that we cannot easily find labels to delete them
		// since we can only find them by geohash
		var NewsflowLabel = {
			matrix: new Hash,
			add_label: function(text,lat,lon,color) {
				var geohash = encodeGeoHash(lat,lon).truncate(3,'')
				// check if there's a label at that position yet:
				if (NewsflowLabel.matrix.get(geohash)) {
					// find a neighboring location (recursive)
					var adjacent = NewsflowLabel.get_neighbor(geohash,0)
					if (adjacent) NewsflowLabel.matrix.set(adjacent,{text:text,lat:lat,lon:lon,color:color})
					// console.log('neighbor:'+adjacent)
				} else {
					NewsflowLabel.matrix.set(geohash,{text:text,lat:lat,lon:lon,color:color})
				}
			},
			get_neighbor: function(geohash,dir) {
				// fail!
				// var dirs = ['top','right','left','bottom']
				var dirs = ['top','bottom']
				// console.log('neighbor:'+dirs[dir]+' '+geohash)
				if (dir > dirs.length-1) {
					// further out
					// for now, fail! must be too many labels!
					return false
				} else {
					var adj = calculateAdjacent(geohash,dirs[dir])
					if (NewsflowLabel.matrix.get(adj)) {
						return NewsflowLabel.get_neighbor(geohash,dir+1)
					} else {
						return adj
					}
				}
			},
			draw: function() {
				this.matrix.each(function(label) {
					$C.save()
					var geohash = decodeGeoHash(label[0])
					var lat = geohash.latitude[1]
					var lon = geohash.longitude[1]
					var x = Projection.lon_to_x(lon), y = Projection.lat_to_y(lat)
					if (Math.abs(label[1].lon - lon) > 0.1 || Math.abs(label[1].lat - lat) > 0.1) {
						// connect label to object with a line: 
						var x2 = Projection.lon_to_x(label[1].lon), y2 = Projection.lat_to_y(label[1].lat)
						$C.begin_path()
							$C.line_width(5000)
							$C.stroke_style(label[1].color)
							$C.move_to(x,y)
							$C.line_to(x2,y2)
						$C.stroke() 
					}
					$C.translate(x,y)
					Planet.label(label[1].text,label[1].color)
					$C.restore()
				})
			},
		}

		document.observe('cartagen:init', Planet.init)
	</script>
	
	<style type="text/css" media="screen">
		#newsflow {
			padding:10px;
		}
		#newsflow div.column {
			font-size:0.9em;
			float:left;
			width:18%;
			padding:0 8px;
			padding-right:16px;
		}
		#newsflow div.column.last {
			padding-right:8px;
		}
		#newsflow em {
			font-style:normal;
			font-weight:bold;
			font-size: 1.8em;
		}
		#title {
		   -moz-user-select: none;
		   -khtml-user-select: none;
		   user-select: none;
			font-family:georgia,times;
			font-size:3em;
			font-style:italic;
			position:absolute; bottom:10px; left:10px;
			color:white;
		}
		#title b {
			color:black;
			font-weight:normal;
			font-size:1.2em;
		}
	</style>
</head>
<body>

<div id='newsflow' class="overlay">
	<div class="column">
		<p><em>NEWSFLOW</em> is a dynamic, real-time map of news reporting, which displays both the latest top stories as well as the news organizations which covered them. All articles are from the last few minutes. </p>
	</div>
	<div class="column">
	  <p>Viewing news in this way lets us see how the choice of 'top stories' by news bureaus is geographically unequal, or rather, what areas of the world are neglected by various national news sources. </p>
	</div>
        <div class="column">
	  <p>Arcs link the location of the news organizations' headquarters to the places mentioned in a given article.</p>
	</div>
	<div class="column">
		<p>Build with HTML5 on the dynamic mapping framework <b>CARTAGEN</b>, <b>NEWSFLOW</b> draws on real-time data from over 200 news organizations as well as Google, Yahoo, and other sources. </p>
	</div>
	<div class="column">
		<p>The ability to view such data in real time offers viewers a chance to see how journalists shape national attention as stories unfolds</p>
		<p><a href="javascript:$('newsflow').hide()">close</a></p>
	</div>
</div>

<div id="title">
</div>

<canvas id="canvas"></canvas>

</body>
</html>
